df_Mobility <- read.csv("~/stats/2020_US_Region_Mobility_Report.csv")
setwd('E:/Grad School/Homework/656/COVID-19/')
df_Mobility <- read.csv("~/stats/2020_US_Region_Mobility_Report.csv")
df_Mobility <- read.csv("/stats/2020_US_Region_Mobility_Report.csv")
df_Mobility <- read.csv("./stats/2020_US_Region_Mobility_Report.csv")
head(df_Mobility)
factor(df_Mobility$country_region)
head(df_Mobility)
factor(df_Mobility$sub_region_1)
factor(df_Mobility$sub_region_2)
summary(df_Mobility)
table(df_Mobility$sub_region_1)
df_COVID_conf_US = read.csv("./csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_confirmed_US.csv")
df_COVID_death_US = read.csv("./csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_deaths_US.csv")
head(df_COVID_conf_US)
head(df_COVID_death_US)
table(df_COVID_conf_US$FIPS)
?right()
head(df_COVID_conf_US)
table(df_Mobility$sub_region_1)
table(df_Mobility$sub_region_2)
table(df_Mobility[df_Mobility$sub_region_1=='Louisiana']$sub_region_2)
table(df_Mobility[df_Mobility$sub_region_1=='Louisiana',]$sub_region_2)
head(df_COVID_conf_US)
table(df_COVID_conf_US[df_COVID_conf_US$Province_State=='Louisiana',]$Admin2)
?str_word_count()
??str_word_count()
?word()
??word()
if(!require(tidyverse)){install.packages('tidyverse');require(tidyverse)}
?word()
table(df_Mobility[df_Mobility$sub_region_1=='Louisiana',]$sub_region_2)
df_Mobility[df_Mobility$sub_region_1=='Louisiana',]$sub_region_2
word(df_Mobility[df_Mobility$sub_region_1=='Louisiana',]$sub_region_2,-1)
word(df_Mobility[df_Mobility$sub_region_1=='Louisiana',]$sub_region_2,1,-1)
word(df_Mobility[df_Mobility$sub_region_1=='Louisiana',]$sub_region_2,1,-2)
word(df_Mobility$sub_region_2,1,-2)
df_Mobility$County_trim = word(df_Mobility$sub_region_2,1,-2)
head(df_Mobility)
head(df_Mobility[500:510,])
?rownames_to_column()
has_rownames(df_COVID_conf_US)
has_colnames(df_COVID_conf_US)
mtcars_tbl
head(df_COVID_conf_US)
if(!require(reshape2)){install.packages('reshape2');require(reshape2)}
head(df_COVID_conf_US)
head(melt(df_COVID_conf_US,id.vars="UID"))
head(melt(df_COVID_conf_US,id.vars=c("UID","iso2","iso3","code3","FIPS","Admin2","Province_State","Country_Region","Lat","Long_","Combined_Key"))
)
df_COVID_conf_US_resh = head(melt(df_COVID_conf_US,id.vars=c("UID","iso2","iso3","code3","FIPS","Admin2","Province_State","Country_Region","Lat","Long_","Combined_Key")))
df_COVID_conf_US_resh
df_COVID_conf_US_resh[df_COVID_conf_US_resh$Admin2='Autauga',]
df_COVID_conf_US_resh[df_COVID_conf_US_resh$Admin2=="Autauga",]
df_COVID_conf_US_resh = head(melt(df_COVID_conf_US,id.vars=c("UID","iso2","iso3","code3","FIPS","Admin2","Province_State","Country_Region","Lat","Long_","Combined_Key"),na.rm=FALSE))
df_COVID_conf_US_resh[df_COVID_conf_US_resh$Admin2=="Autauga",]
length(df_COVID_conf_US_resh)
df_COVID_conf_US_small= df_COVID_conf_US[-2:12,]
df_COVID_conf_US_small= df_COVID_conf_US[-2:-12,]
df_COVID_conf_US_small
df_COVID_conf_US_small= df_COVID_conf_US[,-2:-12]
df_COVID_conf_US_small
df_COVID_conf_US_resh = head(melt(df_COVID_conf_US_small,id.vars="UID",na.rm=FALSE))
?melt()
df_COVID_conf_US_resh
df_COVID_conf_US_resh = head(melt.data.frame(df_COVID_conf_US_small,id.vars="UID",na.rm=FALSE))
df_COVID_conf_US_resh = melt(df_COVID_conf_US_small,id.vars="UID",na.rm=FALSE)
df_COVID_conf_US_resh = melt(df_COVID_conf_US_small,id.vars=c("UID","iso2","iso3","code3","FIPS","Admin2","Province_State","Country_Region","Lat","Long_","Combined_Key"),na.rm=FALSE)
df_COVID_conf_US_resh = melt(df_COVID_conf_US,id.vars=c("UID","iso2","iso3","code3","FIPS","Admin2","Province_State","Country_Region","Lat","Long_","Combined_Key"),na.rm=FALSE)
df_COVID_conf_US_resh
df_Mobility
df_COVID_death_US_resh = melt(df_COVID_death_US,id.vars=c("UID","iso2","iso3","code3","FIPS","Admin2","Province_State","Country_Region","Lat","Long_","Combined_Key"),na.rm=FALSE)
?subset(
)
if(!require(tidyverse)){install.packages('tidyverse');require(tidyverse)}
if(!require(reshape2)){install.packages('reshape2');require(reshape2)}
# The file paths below assume your working directory is 'stats' (where this file is located)
df_Mobility = read.csv("../stats/2020_US_Region_Mobility_Report.csv")
df_COVID_conf_US = read.csv("../csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_confirmed_US.csv")
df_COVID_death_US = read.csv("../csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_deaths_US.csv")
# Following stuff is just goofing around
# head(df_Mobility)
#
# summary(df_Mobility)
#
# table(df_Mobility[df_Mobility$sub_region_1=='Louisiana',]$sub_region_2)
#
# head(df_COVID_conf_US)
#
# head(df_COVID_death_US)
#
# table(df_COVID_conf_US$FIPS)
#
# # Curious about what Louisiana Parishes are listed as
#
# table(df_COVID_conf_US[df_COVID_conf_US$Province_State=='Louisiana',]$Admin2)
#end Goofs
#stripping off the word "Parish" and "County". I am 70% sure there will be other things to fix here when joining.
#df_Mobility$County_trim = word(df_Mobility$sub_region_2,1,-2)
#Need to do some date transposing before joining.
df_COVID_conf_US_resh = melt(df_COVID_conf_US,id.vars=c("UID","iso2","iso3","code3","FIPS","Admin2","Province_State","Country_Region","Lat","Long_","Combined_Key"),na.rm=FALSE)
df_COVID_death_US_resh = melt(df_COVID_death_US,id.vars=c("UID","iso2","iso3","code3","FIPS","Admin2","Province_State","Country_Region","Lat","Long_","Combined_Key","Population"),na.rm=FALSE)
# Next step is to parse some dates in both tables for the join
# Parsing all dates as date_parsed, dropping raw date, renaming associated value
df_Mobility$date_parsed = as.Date(df_Mobility$date,format='%Y-%m-%d')
df_COVID_conf_US_resh$date_parsed = str_sub(str_replace_all(as.character(df_COVID_conf_US_resh$variable),'\\.','/'),start=2)
df_COVID_conf_US_resh$date_parsed = as.Date(df_COVID_conf_US_resh$date_parsed,format='%m/%d/%y')
df_COVID_conf_US_resh = subset(df_COVID_conf_US_resh,select=-variable)
names(df_COVID_conf_US_resh)[names(df_COVID_conf_US_resh)=="value"] = "cases"
df_COVID_death_US_resh$date_parsed = str_sub(str_replace_all(as.character(df_COVID_death_US_resh$variable),'\\.','/'),start=2)
df_COVID_death_US_resh$date_parsed = as.Date(df_COVID_death_US_resh$date_parsed,format='%m/%d/%y')
df_COVID_death_US_resh = subset(df_COVID_death_US_resh,select=-variable)
names(df_COVID_death_US_resh)[names(df_COVID_death_US_resh)=="value"] = "deaths"
# Joining all three tables using the 'conf' table as the base
# First join is between the time series DFs on all variables available since it's the same source
# The first inner join causes a loss of 2.3% of rows (small county diffs)
# Second join is between the new time series DF and the mobility DF on FIPS and Date
# The second inner join causes a loss of 17.6% (small county and time period diffs)
df_intermediate = inner_join(df_COVID_conf_US_resh,df_COVID_death_US_resh)
df_intermediate$FIPS = as.character(df_intermediate$FIPS)
df_Mobility$census_fips_code = as.character(df_Mobility$census_fips_code)
df_merged = inner_join(df_intermediate,df_Mobility,by=c('date_parsed'='date_parsed',"FIPS"='census_fips_code'))
# I'll select and rename columns for all further analysis while leaving the joined table alone
df_subset = subset(df_merged,
select=c(Country_Region,Province_State,Admin2,Combined_Key,FIPS,date_parsed,Population,cases,deaths,
retail_and_recreation_percent_change_from_baseline,grocery_and_pharmacy_percent_change_from_baseline,
parks_percent_change_from_baseline,transit_stations_percent_change_from_baseline,
workplaces_percent_change_from_baseline,residential_percent_change_from_baseline))
names(df_subset) = c('nation','state','county','location_combined','fips','date','population','cases','deaths',
'mobility_retail_recreation_change','mobility_grocery_pharmacy_change','mobility_parks_change',
'mobility_transit_stations_change','mobility_workplaces_change','mobility_residential_change')
getwd()
df_Mobility = read.csv("../stats/2020_US_Region_Mobility_Report.csv")
df_Mobility = read.csv("./stats/2020_US_Region_Mobility_Report.csv")
df_COVID_conf_US = read.csv("./csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_confirmed_US.csv")
df_COVID_death_US = read.csv("./csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_deaths_US.csv")
df_COVID_conf_US_resh = melt(df_COVID_conf_US,id.vars=c("UID","iso2","iso3","code3","FIPS","Admin2","Province_State","Country_Region","Lat","Long_","Combined_Key"),na.rm=FALSE)
df_COVID_death_US_resh = melt(df_COVID_death_US,id.vars=c("UID","iso2","iso3","code3","FIPS","Admin2","Province_State","Country_Region","Lat","Long_","Combined_Key","Population"),na.rm=FALSE)
# Next step is to parse some dates in both tables for the join
# Parsing all dates as date_parsed, dropping raw date, renaming associated value
df_Mobility$date_parsed = as.Date(df_Mobility$date,format='%Y-%m-%d')
df_COVID_conf_US_resh$date_parsed = str_sub(str_replace_all(as.character(df_COVID_conf_US_resh$variable),'\\.','/'),start=2)
df_COVID_conf_US_resh$date_parsed = as.Date(df_COVID_conf_US_resh$date_parsed,format='%m/%d/%y')
df_COVID_conf_US_resh = subset(df_COVID_conf_US_resh,select=-variable)
names(df_COVID_conf_US_resh)[names(df_COVID_conf_US_resh)=="value"] = "cases"
df_COVID_death_US_resh$date_parsed = str_sub(str_replace_all(as.character(df_COVID_death_US_resh$variable),'\\.','/'),start=2)
df_COVID_death_US_resh$date_parsed = as.Date(df_COVID_death_US_resh$date_parsed,format='%m/%d/%y')
df_COVID_death_US_resh = subset(df_COVID_death_US_resh,select=-variable)
names(df_COVID_death_US_resh)[names(df_COVID_death_US_resh)=="value"] = "deaths"
# Joining all three tables using the 'conf' table as the base
# First join is between the time series DFs on all variables available since it's the same source
# The first inner join causes a loss of 2.3% of rows (small county diffs)
# Second join is between the new time series DF and the mobility DF on FIPS and Date
# The second inner join causes a loss of 17.6% (small county and time period diffs)
df_intermediate = inner_join(df_COVID_conf_US_resh,df_COVID_death_US_resh)
df_intermediate$FIPS = as.character(df_intermediate$FIPS)
df_Mobility$census_fips_code = as.character(df_Mobility$census_fips_code)
df_merged = inner_join(df_intermediate,df_Mobility,by=c('date_parsed'='date_parsed',"FIPS"='census_fips_code'))
# I'll select and rename columns for all further analysis while leaving the joined table alone
df_subset = subset(df_merged,
select=c(Country_Region,Province_State,Admin2,Combined_Key,FIPS,date_parsed,Population,cases,deaths,
retail_and_recreation_percent_change_from_baseline,grocery_and_pharmacy_percent_change_from_baseline,
parks_percent_change_from_baseline,transit_stations_percent_change_from_baseline,
workplaces_percent_change_from_baseline,residential_percent_change_from_baseline))
names(df_subset) = c('nation','state','county','location_combined','fips','date','population','cases','deaths',
'mobility_retail_recreation_change','mobility_grocery_pharmacy_change','mobility_parks_change',
'mobility_transit_stations_change','mobility_workplaces_change','mobility_residential_change')
head(df_subset)
require(dplyr)
require(readr)
require(caret)
require(pROC)
head(df_subset)
Xtrain = select(df_subset, -c('cases','deaths'))
Xtrain
head(Xtrain)
head(Ytrain)
Ytrain = select(df_subset, c('cases','deaths')) %>% unlist()
Ytrain
Ytrain = select(df_subset, c('cases','deaths'))
Ytrain
head(Ytrain)
str(Xtrain)
#Note: we can put the number of unique values with the data structure:
rbind(sapply(Xtrain,function(x){ length(unique(x))}),
sapply(Xtrain,class))
str(Ytrain)
rbind(sapply(Ytrain,function(x){ length(unique(x))}),
sapply(Ytrain,class))
# Check to see if there are any missing values in the training data
anyNA(Xtrain)
anyNA(Xtrain[,1:7])
head(Xtrain[,1:7])
head(Xtrain)
head(df_Mobility)
ggplot_missing <- function(x){
if(!require(reshape2)){warning('you need to install reshape2')}
require(reshape2)
require(ggplot2)
x %>%
is.na %>%
melt %>%
ggplot(data = .,
aes(x = Var2,
y = Var1)) +
geom_raster(aes(fill = value)) +
scale_fill_grey(name = "",
labels = c("Present","Missing")) +
theme_minimal() +
theme(axis.text.x  = element_text(angle=45, vjust=0.5)) +
labs(x = "Variables in Dataset",
y = "Rows / observations")
}
ggplot_missing(Xtrain)
df_COVID_conf_US
head(df_COVID_conf_US)
head(df_COVID_conf_US[is.na(df_COVID_conf_US$Combined_Key)])
head(df_COVID_conf_US[,is.na(df_COVID_conf_US$Combined_Key)])
head(df_COVID_conf_US[is.na(df_COVID_conf_US$Combined_Key),])
is.na(df_COVID_conf_US$Combined_Key),]
is.na(df_COVID_conf_US$Combined_Key)
anyNA(df_COVID_conf_US$Combined_Key),]
anyNA(df_COVID_conf_US$Combined_Key)
anyNA(df_COVID_death_US$Combined_Key)
anyNA(df_COVID_death_US$FIPS)
head(df_COVID_conf_US[is.na(df_COVID_conf_US$FIPS),])
head(Xtrain[is.na(Xtrain$fips),])
Xtrain[is.na(Xtrain$fips),]
print(Xtrain[is.na(Xtrain$fips),])
print(Xtrain[is.na(Xtrain$fips) & Xtrain$state != 'Massachusetts',])
print(Xtrain[is.na(Xtrain$fips) & Xtrain$state != 'Massachusetts' & Xtrain$state != 'Michigan',]),])
print(Xtrain[is.na(Xtrain$fips) & Xtrain$state != 'Massachusetts' & Xtrain$state != 'Michigan',])
print(Xtrain[is.na(Xtrain$fips) & Xtrain$state != 'Massachusetts' & Xtrain$state != 'Michigan' & Xtrain$state != 'Missouri' & Xtrain$state != 'Utah',])
XtrainFact = select(Xtrain, -c('date','population','cases','deaths',
'mobility_retail_recreation_change','mobility_grocery_pharmacy_change','mobility_parks_change',
'mobility_transit_stations_change','mobility_workplaces_change','mobility_residential_change'),
) %>%
mutate_all(factor)
XtrainFact = select(Xtrain, -c('date','population',
'mobility_retail_recreation_change','mobility_grocery_pharmacy_change','mobility_parks_change',
'mobility_transit_stations_change','mobility_workplaces_change','mobility_residential_change'),
) %>%
mutate_all(factor)
head(XtrainFact)
dummyModel = dummyVars(~ ., data = XtrainFact, fullRank = TRUE)
XtrainQualDummy = predict(dummyModel, XtrainFact)
XtrainFact = select(Xtrain, -c('nation','date','population',
'mobility_retail_recreation_change','mobility_grocery_pharmacy_change','mobility_parks_change',
'mobility_transit_stations_change','mobility_workplaces_change','mobility_residential_change'),
) %>%
mutate_all(factor)
dummyModel = dummyVars(~ ., data = XtrainFact, fullRank = TRUE)
XtrainQualDummy = predict(dummyModel, XtrainFact)
XtrainFact = select(Xtrain, state)
%>%
mutate_all(factor)
XtrainFact = select(Xtrain, 'state')
%>%
mutate_all(factor)
XtrainFact = select(Xtrain, c('state'),
) %>%
mutate_all(factor)
dummyModel = dummyVars(~ ., data = XtrainFact, fullRank = TRUE)
XtrainQualDummy = predict(dummyModel, XtrainFact)
XtrainQualDummy
XtrainQuan = select(Xtrain, county,location_combined,fips,date,population,mobility_retail_recreation_change,mobility_grocery_pharmacy_change,mobility_parks_change,
mobility_transit_stations_change,mobility_workplaces_change,mobility_residential_change)
XtrainQuan
XtrainFull = cbind(XtrainQualDummy, XtrainQuan)
require(corrplot)
corrplot(cor(XtrainFull), tl.cex = 0.5)
XtrainQuan = select(Xtrain,date,population,mobility_retail_recreation_change,mobility_grocery_pharmacy_change,mobility_parks_change,
mobility_transit_stations_change,mobility_workplaces_change,mobility_residential_change)
XtrainFull = cbind(XtrainQualDummy, XtrainQuan)
#corrplot
require(corrplot)
corrplot(cor(XtrainFull), tl.cex = 0.5)
XtrainQuan2 = select(Xtrain,population,mobility_retail_recreation_change,mobility_grocery_pharmacy_change,mobility_parks_change,
mobility_transit_stations_change,mobility_workplaces_change,mobility_residential_change)
XtrainFull2 = XtrainFull = cbind(XtrainQualDummy, XtrainQuan2)
#corrplot
require(corrplot)
corrplot(cor(XtrainFull2), tl.cex = 0.5)
